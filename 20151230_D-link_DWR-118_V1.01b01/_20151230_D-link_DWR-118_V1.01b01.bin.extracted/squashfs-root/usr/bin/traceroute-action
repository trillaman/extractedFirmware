#!/bin/ash

case "$1" in

    start)
        TARGET=`rdcsman 0x8015000F str`
        TARGET_PROTO="`rdcsman 0x80150108 u32`"  # Protocol (UDP: 0 or ICMP: 1)

        #For AMIT Model
        IF_TYPE="`rdcsman 0x80150106 u32`" # Interface Type (LAN or WAN)
        IF_IDX="`rdcsman 0x80150107 u32`"  # Interface Index (Pair with IF_TYPE)

        IF_NAME=""
        if [ $IF_TYPE -eq 0 ] && [ $IF_IDX -eq 0 ]; then # Auto, check if default route exist
        	DEFAULT=0
        	for dst in `ip route ls | awk '{ print $1 }'`; do
        		if [ $dst = "default" ]; then
        			DEFAULT=1
        			break
        		fi
        	done
        	
        	# if no default route, retrieve IF_NAME in wandef table
        	if [ $DEFAULT -eq 0 ]; then
        		for dev in `ip route ls table wandef | awk '{ print $5}'`; do
        			if [ -n $dev ]; then
        				IF_NAME=$dev
        				break
        			fi
        		done
        		
        		# find matching IF_IP
        		IF_TMP="`rdcsman 0x8001000b str`"
        		if [ $IF_NAME = $IF_TMP ]; then
        			IF_IP="`rdcsman 0x80010002 ipv4`"
        		else
        			for i in 0 1 2 3 4 5 6 7 8 9 a b c d e f; do
        				IF_TMP="`rdcsman 0x8001019$i str`"
        				if [ $IF_NAME = $IF_TMP ]; then
        					IF_IP="`rdcsman 0x8001011$i ipv4`"
        				fi
        			done
        		fi
        	fi
        else # not Auto, user define interface
        	if [ $IF_TYPE -eq 1 ]; then # LAN Group
        		if [ $IF_IDX -eq 1 ]; then # LAN1
        			IF_NAME="`rdcsman 0x8000F301 str`"  # S_SYS_IF_BR0
        			IF_IP="`rdcsman 0x00010004 ipv4`" # C_LOCAL_LANIP
        		elif [ $IF_IDX -ge 2 ] && [ $IF_IDX -le 4 ]; then # LAN2 ~ LAN4 (VLAN1 ~ VLAN3)
        			ADDR_IDX="`printf %x $((IF_IDX-2))`"
        			IF_NAME="`rdcsman 0x009300c$ADDR_IDX str`"  # C_VLAN_SVR_IFNAME[0] ~ C_VLAN_SVR_IFNAME[3]

        			IF_IP="`rdcsman 0x009300d$ADDR_IDX ipv4`" # C_VLAN_SVR_IP[0] ~ C_VLAN_SVR_IP[3]
        		fi
        	elif [ $IF_TYPE -eq 2 ]; then # WAN Group
        		if [ $IF_IDX -eq 1 ]; then # WAN1
        			WAN_IDX="`rdcsman 0x00010600 u32`" # C_LOCAL_WAN1_INDEX
        		elif [ $IF_IDX -eq 2 ]; then # WAN2
        			WAN_IDX="`rdcsman 0x00010601 u32`" # C_LOCAL_WAN2_INDEX
        			[ $WAN_IDX -eq 0 ] && WAN_IDX="-1"
        		elif [ $IF_IDX -eq 3 ]; then # WAN3
        			WAN_IDX="`rdcsman 0x00010602 u32`" # C_LOCAL_WAN3_INDEX
        			[ $WAN_IDX -eq 0 ] && WAN_IDX="-1"
        		else
        			WAN_IDX="-1"
        		fi

        		# Interface mapping
        		if [ $WAN_IDX -eq 99 ] || [ $WAN_IDX -eq 0 ]; then
        			IF_NAME="`rdcsman 0x8001000b str`" # S_LOCAL_WAN_IF_NAME
        			IF_IP="`rdcsman 0x80010002 ipv4`" # S_LOCAL_WAN_IP
        		elif [ $WAN_IDX -ge 1 ] && [ $WAN_IDX -le 16 ]; then
        			ADDR_IDX="`printf %x $((WAN_IDX-1))`"
        			IF_NAME="`rdcsman 0x8001019$ADDR_IDX str`" # S_LOCAL_MULTIWAN_IF_NAME[$WAN_IDX - 1]
        			IF_IP="`rdcsman 0x8001011$ADDR_IDX ipv4`" # S_LOCAL_MULTIWAN_IP[$WAN_IDX - 1]
        		fi
        	fi
        fi

        IF_ARGS=""
        if [ -n "$IF_NAME" ]; then
        	# Interface binding for specific interface option on traceroute test.
        	IF_ARGS="-i $IF_NAME"
        fi

        SIP_ARGS=""
        if [ -n "$IF_IP" ] && [ "$IF_IP" != "0.0.0.0" ]; then
        	# Determinate source IP option on traceroute test.
        	SIP_ARGS="-s $IF_IP"
        fi

        PROTO_ARGS=""
        if [ -n "$TARGET_PROTO" ] && [ "$TARGET_PROTO" == "1" ]; then
        	# Use ICMP protocol instead of UDP for traceroute test.
        	PROTO_ARGS="-I"
        fi

        # not Auto but no IF -> no interface
        if [ -z "$IF_ARGS" ] && [ $IF_TYPE -ne 0 ]; then
        	logger -t "tracert" "No interface, tracert fail..."
        	echo "No interface, tracert fail..." > /var/run/traceroute_result
        else
	        logger -t "tracert" "traceroute -w 2 \"$TARGET\" $IF_ARGS $SIP_ARGS $PROTO_ARGS > /var/run/traceroute_result  &"
	        traceroute -w 2 "$TARGET" $IF_ARGS $SIP_ARGS $PROTO_ARGS > /var/run/traceroute_result  &
	        PID=$!
	        wrcsman "0x80150011 $PID && 0x80150010 1"
	      fi
        ;;

    startv6)
        TARGET=`rdcsman 0x8015000F str`
        traceroute -w 2 "$TARGET" > /var/run/traceroute_result  &
        PID=$!
        wrcsman "0x80150011 $PID && 0x80150010 1"
        ;;

    status)
        PID=`rdcsman 0x80150011 u32`
        if [ ! -d "/proc/$PID" ] ; then
            wrcsman "0x80150010 0"
        fi
        ;;

    show)
        cat /var/run/traceroute_result
        ;;

    *)
        exit 1
        ;;
esac

exit 0


