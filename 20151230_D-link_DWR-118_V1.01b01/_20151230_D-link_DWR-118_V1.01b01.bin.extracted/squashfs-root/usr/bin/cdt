#!/bin/sh

cdt_last="/tmp/cdt.last"
cdt_dnsq_last="/tmp/cdt_dnsq.last"
cmd="rrlog"
interval=3
lines=15
lan_url=""
target_dir="/tmp"
dfiles=""
kprogs="" 
iface=""
server=""
domain=""
gateway=""
partition=""

exit_(){
    [ "$1" = "1" ] && echo "argv error !"
    exit 1;
}

reset_default() {
    csmanuds -r 2; sleep 1 ; reboot
}

monitor() {
    [ "$cmd"      = "" ] && exit_ 1 
    [ "$interval" = "" ] && exit_ 1
    [ "$lines"    = "" ] && exit_ 1 
    cdt_record;
    while :; do
        eval $cmd |awk -v NUM=$lines '{x[NR]=$0}END{for(i=NR-NUM;i<=NR;i++)print x[i]}'
        echo "-------------------------------------------------------"
        sleep $interval
    done  
}

down_file() {
    [ "$lan_url"    = "" ] && exit_ 1
    [ "$target_dir" = "" ] && exit_ 1
    [ "$dfiles"     = "" ] && exit_ 1
    for dfile in `echo $dfiles|awk '{for(i=1;i<=split($0,r,",");i++)printf("%s ", r[i]);}'` ; do
        rm -f $target_dir/$dfile
        echo "wget $lan_url/$dfile -O $target_dir/$dfile"
        wget $lan_url/$dfile -O $target_dir/$dfile
        chmod +x $target_dir/$dfile
    done
}

killall_progs() {
    [ "$kprogs" = "" ] && exit_ 1 
    for kprog in `echo $kprogs|awk '{for(i=1;i<=split($0,r,",");i++)printf("%s ", r[i]);}'` ; do
        printf "kill %s, PID: " $kprog
        for pid in `ps|grep $kprog|grep -v grep|grep -v cdt|awk '{print $1}'`; do
            printf "%s ," $pid
            kill -0 $pid > /dev/null 2>&1
            if [ $? -eq 0 ]; then
                kill $pid > /dev/null 2>&1
                kill -9 $pid > /dev/null 2>&1
            fi                              
        done
        printf "\n"
    done    
    printf "\n"
}

dns_query_record(){
    echo "" > $cdt_dnsq_last
    echo "iface=$iface" >> $cdt_dnsq_last
    echo "server=$server" >> $cdt_dnsq_last
    echo "domain=$domain" >> $cdt_dnsq_last
    echo "gateway=$gateway" >> $cdt_dnsq_last
}

dns_query(){
    [ "$domain" = "" ] && echo "No specify domain name " && return 
    echo ""
    
    local rt_iface=""
    local dq_iface=""
    if [ "$iface" != "" ]; then 
        rt_iface="dev $iface" 
        dq_iface="-I $iface" 
    fi

    local rt_gw=""
    if [ "$gateway" != "" ]; then 
        rt_gw="gw $gateway" 
    fi

    local rt_server=""
    local dq_server=""
    if [ "$server" = "" ]; then 
        server="8.8.8.8"
        echo "No specify DNS server, using default $server"
        rt_server="$server" 
        dq_server="-s $server" 
    else 
        rt_server="$server" 
        dq_server="-s $server" 
    fi

    if [ -n "$rt_gw" -o -n "$rt_iface" ]; then
        echo ">> route add -host $rt_server $rt_gw $rt_iface"
        route add -host $rt_server $rt_gw $rt_iface
    fi

    echo ">> dns-query -r $dq_iface $dq_server $domain"
    local dq_result="`dns-query -r $dq_iface $dq_server $domain`" 
    if [ "$dq_result" = "" ]; then 
        echo "DNS query failed !! Try to ping to DNS Server: $server"
        echo ">> ping -c 1 $server"
        ping -c 1 $server >/dev/null 2>&1
        if [ $? = 1 ]; then
            echo "Ping DNS server failed !!"
        else
            echo "Ping DNS server success !!"
        fi
    else 
        echo "Received DNS reply !"        
    fi

    if [ -n "$rt_gw" -o -n "$rt_iface" ]; then
        echo ">> route delete -host $rt_server $rt_gw $rt_iface"
        route delete -host $rt_server $rt_gw $rt_iface
    fi

    echo ""
    dns_query_record;
}

swap_on(){
    if [ ! -e /sbin/swapon ] || [ ! -e /sbin/mkswap ] ; then
        echo "No found swapon/mkswap"
        return;
    fi

    if [ "$partition" = "" ] ; then
        echo "No specify partition $partition !"
        return;
    fi    

    local phymem=`free|awk '{if(NR==2)print $2}'`
    local swaplmem=`free|awk '{if(NR==3)print $2}'`
    if [ $swaplmem -gt $phymem ]; then
        echo "SWAP should not larger than Phyical Memort"
        return;
    fi
    
    local model="`rdcsman 0x80004220 str`"
    local swap_file="/var/usb/$partition/.$model.swap"
    if [ ! -e $swap_file ]; then
        dd if=/dev/zero of=$swap_file bs=1k count=16382 
    fi  

    echo 10 > /proc/sys/vm/swappiness # keep the most data in memory
    mkswap $swap_file
    swapon $swap_file
    [ -x /usr/bin/fatattr ] && fatattr +h $swap_file
}

swap_off(){
    if [ ! -e /sbin/swapoff ]; then
        echo "No found swapoff"
        return;
    fi                        
 
    if [ "$partition" = "" ] ; then
        echo "No specify partition $partition !"
        return;
    fi    
    
    local model="`rdcsman 0x80004220 str`"
    local swap_file="/var/usb/$partition/.$model.swap"
    if [ -e $swap_file ]; then
        swapoff $swap_file
    fi  
}    

cdt_init() {
    [ -e $cdt_last ] && . $cdt_last 
    [ "`echo $PATH|grep tmp`" != "" ] && return 
    echo "Need export the environment !!"
    echo ""
    echo 'export LD_LIBRARY_PATH="/tmp:/tmp/lib:$LD_LIBRARY_PATH"'
    echo 'export PATH="/tmp:/tmp/bin:$PATH"'
    echo ""
}

cdt_record() {
    echo "" > $cdt_last
    echo "interval=$interval" >> $cdt_last
    echo "lines=$lines" >> $cdt_last
    echo "lan_url=$lan_url" >> $cdt_last
    echo "target_dir=$target_dir" >> $cdt_last
    echo "dfiles=$dfiles" >> $cdt_last
}

usage() {
    echo "Chad's Debug Tools (cdt)"        
    echo "Usage: "        
    echo "  $0 -m command [ -t interval ] [ -n show lines ] -> monitor the result of command"
    echo "  $0 -mlog      [ -t interval ] [ -n show lines ] -> monitor log "
    echo "  $0 -d file1[,file2,file3,...] [ -u http://LAN_IP:LAN_Port ] [ -o target_dir ]" 
    echo "  $0 -df                       -> download the last file from the last URL address" 
    echo "  $0 -c                        -> clear log"
    echo "  $0 -rst                      -> reset to default and reboot" 
    echo "  $0 -k prog1[,prog2,prog3...] -> killall programs" 
    echo "  $0 -dq domain [ -s DNS server ] [ -i interface ] [ -g gateway ] -> using DNS query to test connectitiy" 
    echo "  $0 -swapon [partition]       -> e.g. $0 -swapon usb_a1" 
    echo "  $0 -swapoff [partition]      -> e.g. $0 -swapoff usb_a1" 
    echo "  $0 -p lan/wan                -> change lan/wan"
}

cdt_init;   
while :; do    
    #echo $*,1:$1
    if [ "$1" = "-m" ]; then             
        shift; cmd="$1"; 
        func="monitor"
    elif [ "$1" = "-t" ]; then     
        shift; interval="$1"
    elif [ "$1" = "-n" ]; then     
        shift; lines="$1"
    elif [ "$1" = "-mlog" ]; then     
        cmd="rrlog"; 
        func="monitor";    
    elif [ "$1" = "-c" ]; then     
        rm -rf /var/log/rlog.* ; break ;
    elif [ "$1" = "-k" ]; then     
        shift; kprogs="$1"; 
        func="killall_progs";
    elif [ "$1" = "-u" ]; then     
        shift; lan_url="$1"; 
    elif [ "$1" = "-o" ]; then     
        shift; target_dir="$1" 
    elif [ "$1" = "-d" ]; then     
        shift; dfiles="$1" ; 
        func="down_file" 
    elif [ "$1" = "-df" ]; then     
        func="down_file" 
    elif [ "$1" = "-rest" ]; then     
        func="reset_default" 
    elif [ "$1" = "-dq" ]; then     
        func="dns_query" ; shift; 
        if [ "$1" != "" ]; then 
            domain="$1";
        else            
            [ -e $cdt_dnsq_last ] && . $cdt_dnsq_last 
            break; 
        fi
    elif [ "$1" = "-i" ]; then     
        shift; iface="$1"; 
    elif [ "$1" = "-s" ]; then     
        shift; server="$1"; 
    elif [ "$1" = "-g" ]; then     
        shift; gateway="$1"; 
    elif [ "$1" = "-swapon" ]; then     
        shift; partition="$1";        
        func="swap_on" ;
    elif [ "$1" = "-swapoff" ]; then     
        shift; partition="$1";      
        func="swap_off" ;
    elif [ "$1" = "-p" ]; then
        shift; 
        if [ "$1" = "lan" ]; then
            echo "switch to lan port"
            switch reg w 2014 10001;
            switch vlan set 0 1 10000011
            switch vlan set 1 2 00000000
        else
            echo "switch to wan port"
            switch reg w 2014 10002;
            switch vlan set 0 1 00000000
            switch vlan set 1 2 10000011
        fi
    else 
        usage; break;        
    fi

    [ "$*" != "" ] && shift
    [ "$1"  = "" ] && break
done
[ "$func" != "" ] && eval $func
cdt_record;
exit 0

